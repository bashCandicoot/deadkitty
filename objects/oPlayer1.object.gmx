<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oPlayer</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
ground = 608
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

// Initialise Player \\
if (room == rGame) {
    if (global.initialisePlayer == false) {   
        image_speed = 1            
        sprite_index = sPlayer
        spawn = true
        global.initialisePlayer = true } }

// Spawn Player \\
if (spawn == false) {
    image_speed = 0.70   
    sprite_index = sPlayerSpawn
    secondsSinceSpawn += 1/room_speed
    if (secondsSinceSpawn &gt; 0.16) {
        secondsSinceSpawn = 0
        image_speed = 1            
        sprite_index = sPlayer
        spawn = true
        death = false } }

// Jumping \\
if (oPlayer.death1 == false) {
    if (y == ground) {
        if (land == false) {
            if (roll == false) {
                if (rollComplete == false) {
                    if (mouse_check_button_pressed (mb_left)) {
                        alarm[0] = 35
                        sprite_index = sPlayerJump
                        image_index = 0
                        jump = true } } } } } }
// jump = true if player is on the ground, change sprite to jump
// set alarm[0] to change sprite back to default (running sprite)    
if (oPlayer.death1 == false) {     
    if (jump == true) {   
        secondsSinceJump += 1/room_speed
        if (secondsSinceJump &lt; 0.2) {
            image_speed = 0.50                      
            y -= jumpForce }
            if (secondsSinceJump &gt;= 0.2) {
                secondsSinceJump = 0
                jump = false 
                fall = true } } }
// while secondsSinceJump &lt; 0.2 apply jumpForce to y

// Falling \\
if (oPlayer.death1 == false) {                
    if (fall == true) {
        secondsSinceFall += 1/room_speed
        if (secondsSinceFall &gt; 0.2) {
            if (secondsSinceFall &lt; 0.4) {               
                sprite_index = sPlayerFall                                     
                y += fallForce } }
        if (secondsSinceFall &gt;= 0.4) {
            secondsSinceFall = 0
            fall = false 
            land = true } } }
// while secondsSinceFall is between 0.3 &amp; 0.5 change sprite to falling
// and apply fallForce. Call alarm[0] to set sprite back to default

// Landing \\
if (oPlayer.death1 == false) {    
    if (land == true) {
        secondsSinceLand += 1/room_speed
        if (secondsSinceLand &lt; 0.20) {
            sprite_index = sPlayerLand
            image_speed = 0.70 }
        if (secondsSinceLand &gt;= 0.20) {
            secondsSinceLand = 0
            if (rollWhenLanding == true) {
                rollWhenLanding = false
                alarm[3] = 1 }
            else {
                alarm[0] = 1 }
            land = false } } }
// while secondsSinceLand is &lt; 0.20 change sprite to landing
// if rmb has been clicked rollWhenLanding == true, else standard sprite

// Death \\
if (oPlayer.death1 == false) {
    enemyCollision = instance_place(x, y, oEnemy)
    if (instance_exists(enemyCollision)) or (oPlayer.death2 == true) {
        oPlayer.death1 = true
        explode = true
        deathPosX = x
        deathPosY = y 
        visible = false } } 
// go inivisble upon collision, record deathPos
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
